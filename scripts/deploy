#!/usr/bin/env bash

set -e 

SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done

export DEPLOY_ROOT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

source "$DEPLOY_ROOT_DIR/common.bash"

ensure_environment_url
ensure_deploy_variables

CI_ENVIRONMENT_HOSTNAME="${CI_ENVIRONMENT_URL}"
CI_ENVIRONMENT_HOSTNAME="${CI_ENVIRONMENT_HOSTNAME/http:\/\//}"
CI_ENVIRONMENT_HOSTNAME="${CI_ENVIRONMENT_HOSTNAME/https:\/\//}"

echo "Creating namespace $KUBE_NAMESPACE"

cat <<EOF | kubectl apply -f -
kind: Namespace
apiVersion: v1
metadata:
  name: $KUBE_NAMESPACE
EOF

kubectl create secret -n $KUBE_NAMESPACE \
  docker-registry gitlab-registry \
  --docker-server="$CI_REGISTRY" \
  --docker-username="$CI_REGISTRY_USER" \
  --docker-password="$CI_REGISTRY_PASSWORD" \
  --docker-email="$GITLAB_USER_EMAIL" \
  -o yaml --dry-run | kubectl replace -n $KUBE_NAMESPACE --force -f -

track="${1-stable}"
name="$CI_ENVIRONMENT_SLUG"

if [[ "$track" != "stable" ]]; then
  name="$name-$track"
fi

replicas="1"

env_track="${track^^}"
env_slug="${CI_ENVIRONMENT_SLUG//-/_}"
env_slug="${env_slug^^}"

echo "Configuring database..."
postgres_name="${CI_ENVIRONMENT_SLUG}-postgres"
postgres_app="${CI_ENVIRONMENT_SLUG}-postgres"

POSTGRES_USER="${POSTGRES_USER:-user}"
POSTGRES_PASSWORD="${POSTGRES_PASSWORD:-password}"
POSTGRES_DB="${POSTGRES_DB:-$env_slug}"
DATABASE_URL="postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${postgres_name}:5432/$POSTGRES_DB"

cat <<EOF | kubectl apply -n $KUBE_NAMESPACE --force -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $postgres_name
  namespace: $KUBE_NAMESPACE
  labels:
    app: $postgres_app
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $postgres_app
      tier: database
  template:
    metadata:
      labels:
        name: $postgres_name
        app: $postgres_app
        tier: database
    spec:
      imagePullSecrets:
      - name: gitlab-registry
      containers:
      - name: app
        image: postgres:9.6-alpine
        imagePullPolicy: Always
        env:
        - name: POSTGRES_USER
          value: "$POSTGRES_USER"
        - name: POSTGRES_PASSWORD
          value: "$POSTGRES_PASSWORD"
        - name: POSTGRES_DB
          value: "$POSTGRES_DB"
        ports:
        - name: postgres
          containerPort: 5432
---
apiVersion: v1
kind: Service
metadata:
  name: $postgres_name
  namespace: $KUBE_NAMESPACE
  labels:
    app: $postgres_app
spec:
  ports:
    - name: postgres
      port: 5432
      targetPort: postgres
  selector:
    app: $postgres_app
    tier: database
EOF

echo "Waiting for deployment..."
kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$postgres_name"

echo "Deploying $CI_ENVIRONMENT_SLUG (track: $track, replicas: $replicas) with $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG..."
cat <<EOF | kubectl apply -n $KUBE_NAMESPACE --force -f -
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $name
  namespace: $KUBE_NAMESPACE
  labels:
    app: $CI_ENVIRONMENT_SLUG
    track: "$track"
    pipeline_id: "$CI_PIPELINE_ID"
    build_id: "$CI_BUILD_ID"
    tier: api
spec:
  replicas: $replicas
  selector:
    matchLabels:
      app: $CI_ENVIRONMENT_SLUG
      tier: api
      track: "$track"
  template:
    metadata:
      labels:
        name: $name
        app: $CI_ENVIRONMENT_SLUG
        track: "$track"
        tier: api
    spec:
      imagePullSecrets:
      - name: gitlab-registry
      containers:
      - name: app
        image: $CI_REGISTRY_IMAGE:$CI_REGISTRY_TAG
        imagePullPolicy: Always
        env:
        - name: RAILS_SECRET_KEY
          value: "k#xfum2s88z=a++od3x66c5gzk&c3qqd-_g1%&vuxeyh&vxi-n"
        - name: RAILS_DEBUG 
          value: True
        - name: RAILS_ALLOWED_HOST
          value: "*"
        - name: RAILS_GCM_KEY
          value: "gcm_key"
        - name: RAILS_CORS_ALLOW_ALL
          value: True
        - name: RAILS_CORS_WHITELIST
          value: ""
        - name: RAILS_DB_NAME
          value: "$POSTGRES_DB"
        - name: RAILS_DB_USER 
          value: "$POSTGRES_USER"
        - name: RAILS_DB_PASS
          value: "$POSTGRES_PASSWORD"
        - name: RAILS_DB_HOST
          value: "$postgres_name"
        - name: RAILS_DB_PORT
          value: "5432"
        ports:
        - name: api
          containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: $CI_ENVIRONMENT_SLUG
  namespace: $KUBE_NAMESPACE
  labels:
    app: $CI_ENVIRONMENT_SLUG
    pipeline_id: "$CI_PIPELINE_ID"
    build_id: "$CI_BUILD_ID"
spec:
  ports:
    - name: api
      port: 80
      targetPort: api
  selector:
    app: $CI_ENVIRONMENT_SLUG
    tier: api
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: $CI_ENVIRONMENT_SLUG
  namespace: $KUBE_NAMESPACE
  labels:
    app: $CI_ENVIRONMENT_SLUG
    pipeline_id: "$CI_PIPELINE_ID"
    build_id: "$CI_BUILD_ID"
  annotations:
    kubernetes.io/ingress.class: "nginx"
spec:
  rules:
  - host: $CI_ENVIRONMENT_HOSTNAME
    http:
      paths:
      - path: /
        backend:
          serviceName: $CI_ENVIRONMENT_SLUG
          servicePort: 80
EOF

echo "Waiting for deployment..."
kubectl rollout status -n "$KUBE_NAMESPACE" -w "deployment/$name"

echo "Application is accessible at: ${CI_ENVIRONMENT_URL}"
echo ""
